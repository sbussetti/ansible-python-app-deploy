---

- name: "[app] install packages needed for python application"
  sudo: true
  sudo_user: root
  apt: pkg={{item}} state=present
  with_items:
    # app deps
    - libjpeg62
    - libjpeg62-dev
    - libfreetype6
    - libfreetype6-dev
    - libmysqlclient-dev
    - libmemcached-dev
    - libpq-dev
    - libssl-dev
    - libxml2-dev
    - libxslt1-dev
    - swig
    - zlib1g-dev
    # python
    - python-dev
    - python-imaging
    - python-psycopg2

- name: "[app] symlink x86_64 library/header files"
  sudo: true
  sudo_user: root
  action: file 
    src={{item.source}} 
    dest={{item.target}} 
    state=link
  with_items:
    - { source: '/usr/lib/x86_64-linux-gnu/libfreetype.so', target: '/usr/lib/libfreetype.so' }
    - { source: '/usr/lib/x86_64-linux-gnu/libz.so', target: '/usr/lib/libz.so' }
    - { source: '/usr/lib/x86_64-linux-gnu/libjpeg.so.62', target: '/usr/lib/x86_64-linux-gnu/libjpeg.so' }
    - { source: '/usr/lib/x86_64-linux-gnu/libjpeg.so', target: '/usr/lib/libjpeg.so' }
    - { source: '/usr/include/x86_64-linux-gnu/openssl/opensslconf.h', target: '/usr/include/openssl/opensslconf.h' }
    - { source: '/usr/include/freetype2', target: '/usr/include/freetype' }
  when: ansible_userspace_architecture == "x86_64"

- name: "[app] install global libraries with pip"
  sudo: true
  sudo_user: root
  pip: 
    extra_args="-i {{pypi_mirror_url}}"
    name={{item}} 
    state=latest
  with_items:
    - virtualenv
    - fabric
#"

- name: "[app] App log root"
  file:
    path={{app_log_root}}
    owner={{app.user}}
    group={{app.user}}
    state=directory

- name: "[app] ensure approot exists"
  file:
    path={{app_root}}
    owner={{app.user}}
    group={{app.user}}
    state=directory

- name: "[app] ensure app log dir exists"
  file:
    path={{app_log_root}}
    owner={{app.user}}
    group={{app.user}}
    state=directory

- name: "[app] create virtualenv"
  shell: virtualenv {{ app_venv_root }}
  sudo: True
  sudo_user: "{{app.user}}"
  args:
    executable: /bin/bash
    creates: "{{app_venv_root}}"

- name: "[app] install virtualenv base"
  sudo: true
  sudo_user: root
  sudo_user: "{{app.user}}"
  pip:
    extra_args="-i {{pypi_mirror_url}}"
    name="{{item}}"
    virtualenv="{{app_venv_root}}"
    state=latest
  with_items: app.venv_base_libs 
  when: app.venv_base_libs is defined
#"

- name: "[app] ensure app database is created"
  postgresql_db:
    login_password={{db_admin_password}}
    login_user={{db_admin_user}}
    login_host={{app.dbhost}}
    port={{app.dbport}}
    name={{app.dbname}}
    state=present
  when: app.dbname is defined

- name: "[app] ensure app db user has access to database"
  postgresql_user:
    login_password={{db_admin_password}}
    login_user={{db_admin_user}}
    login_host={{app.dbhost}}
    port={{app.dbport}}
    db={{app.dbname}}
    name={{app.dbuser}}
    password={{app.dbpassword}}
    priv=ALL
  when: app.dbuser is defined and not app.db_is_rds

- name: "[app] ensure app db user does not have unnecessary privilege"
  postgresql_user:
    login_password={{db_admin_password}}
    login_user={{db_admin_user}}
    login_host={{app.dbhost}}
    port={{app.dbport}}
    name={{app.dbuser}}
    role_attr_flags=NOSUPERUSER,NOCREATEDB,NOCREATEROLE
  when: app.dbuser is defined and not app.db_is_rds

- include: nodejs/app.yml
    app={{apps[app_name]}}
  when: "'nodejs' in app.build_steps"

- include: sass/app.yml
    app={{apps[app_name]}}
  when: "'sass' in app.build_steps"

